{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","robot","className","alt","name","src","id","email","CardList","robots","map","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","children","style","overflow","border","height","App","onSearchChange","event","setState","searchField","target","value","state","fetch","then","response","json","users","this","robotsFiltered","filter","toLowerCase","includes","toLocaleLowerCase","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"4NAaeA,EAXF,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACd,OACE,yBAAKC,UAAU,mDACb,yBAAKC,IAAKF,EAAMG,KAAMC,IAAG,+BAA0BJ,EAAMK,GAAhC,cACzB,6BACE,4BAAKL,EAAMG,MACX,2BAAIH,EAAMM,UCMHC,EAXE,SAAC,GAChB,OAD+B,EAAbC,OAETC,KAAI,SAACT,EAAOK,GACjB,OACE,kBAAC,EAAD,CAAMK,IAAKL,EACTL,MAAOA,QCOFW,EAbG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACnB,OACE,yBAAKX,UAAU,OACb,2BACEA,UAAU,mCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCCHI,EARA,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAChB,OACE,yBAAKC,MAAO,CAACC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UACjEJ,EADH,MC6CWK,G,wDAzCb,aAAe,IAAD,8BACZ,gBAeFC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAf1C,EAAKC,MAAQ,CACXH,YAAa,GACblB,OAAQ,IAJE,E,gEAQO,IAAD,OAElBsB,MAAM,8CACHC,MAAM,SAAAC,GAAQ,OAAIA,EAASC,UAC3BF,MAAM,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAEjB,OAAQ0B,S,+BAQlC,IAAD,EACyBC,KAAKN,MAA7BrB,EADD,EACCA,OAAQkB,EADT,EACSA,YACVU,EAAiB5B,EAAO6B,QAAQ,SAAArC,GAClC,OAAOA,EAAMG,KAAKmC,cAAcC,SAASb,EAAYc,wBAGzD,OAAQhC,EAAOiC,OAEX,yBAAKxC,UAAU,OACb,wBAAIA,UAAU,sCAAd,gBACA,kBAAC,EAAD,CAAWW,aAAcuB,KAAKZ,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUf,OAAQ4B,MANF,wBAAInC,UAAU,oBAAd,kB,GA3BVyC,c,MCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAQ,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.fafef3df.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ robot }) => {\r\n  return (\r\n    <div className=\"dib tc bg-light-green grow br3 pa3 ma3 shadow-5\">\r\n      <img alt={robot.name} src={`https://robohash.org/${robot.id}?200X200`} />\r\n      <div>\r\n        <h2>{robot.name}</h2>\r\n        <p>{robot.email}</p>\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    robots.map((robot, id) => {\r\n      return (\r\n        <Card key={id}\r\n          robot={robot} />\r\n      )\r\n    })\r\n  );\r\n};\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n  return (\r\n    <div className=\"pd2\">\r\n      <input\r\n        className=\"pa1 ba b--green bg-lightest-blue\"\r\n        type=\"search\"\r\n        placeholder=\"search robots\"\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = ({ children }) => {\r\n  return (\r\n    <div style={{overflow: 'scroll', border: '0px solid black', height: '400px'}}>\r\n      {children}}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n// import { robots } from '../robots';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      searchField: \"\",\r\n      robots: []\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    // this.setState({ robots: robots });\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then( response => response.json() )\r\n      .then( users => this.setState({ robots: users })\r\n    );\r\n  }\r\n\r\n  onSearchChange = (event) => {\r\n    this.setState({ searchField: event.target.value });\r\n  }\r\n\r\n  render() {\r\n    const { robots, searchField } = this.state;\r\n    const robotsFiltered = robots.filter( robot => {\r\n        return robot.name.toLowerCase().includes(searchField.toLocaleLowerCase());\r\n    });\r\n      \r\n    return !robots.length ? <h1 className=\"f1 dark-gray pt3\">Loading...</h1> :\r\n      (\r\n        <div className=\"tc \">\r\n          <h1 className=\"f3 fw8 dark-gray pt1 underline ttu\" >RobotFriends</h1>\r\n          <SearchBox searchChange={this.onSearchChange} />\r\n          <Scroll>\r\n            <CardList robots={robotsFiltered} />\r\n          </Scroll>\r\n        </div>\r\n      );\r\n      \r\n  }\r\n  \r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App'\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render( <App />, document.getElementById('root') );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}